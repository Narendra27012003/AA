// src/app/stock-management/stock-management.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import {StockManagementService, StockItem } from '../services/stock-management.service';

@Component({
  selector: 'app-stock-management',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './stock-management.component.html',
  styleUrls: ['./stock-management.component.css']
})
export class StockManagementComponent implements OnInit {
  // Tabs array can be expanded if needed.
  tabs = [{ label: 'Stocks Overview', value: 'overview' }];
  selectedTab = 'overview';

  // Data arrays.
  stockList: StockItem[] = [];
  filteredStockList: StockItem[] = [];

  // Pagination variables.
  currentPage = 1;
  itemsPerPage = 10;

  // Sorting variables.
  sortColumn = 'customentName';
  sortDirection: 'asc' | 'desc' = 'asc';

  // Filtering variables.
  filterColumn = 'customentName';
  filterText = '';
  toggleFilterPopup = false;

  // Search variable.
  searchQuery = '';

  // Variables for the Edit/Create Modal.
  showEditModal = false;
  isEditMode = false;
  editData: Partial<StockItem> = {};

  constructor(private stockService: StockManagementService) {}

  ngOnInit(): void {
    // Fetch stock list from the JSON file.
    this.stockService.getStockList().subscribe((res) => {
      this.stockList = res.stockInventoryList;
      this.filteredStockList = [...this.stockList];
      this.applySearchFilter();
    });
  }

  // Handle tab selection.
  selectTab(tabValue: string) {
    this.selectedTab = tabValue;
  }

  // Apply search filter across multiple fields.
  applySearchFilter() {
    const query = this.searchQuery.toLowerCase().trim();
    this.filteredStockList = this.stockList.filter((item) => {
      return (
        item.customentName.toLowerCase().includes(query) ||
        item.product.toLowerCase().includes(query) ||
        item.cashier.toLowerCase().includes(query)
      );
    });
    this.applyColumnFilter();
    this.applySorting();
    this.currentPage = 1;
  }

  // Sort the filtered list.
  applySorting() {
    this.filteredStockList.sort((a, b) => {
      const valA = (a as any)[this.sortColumn];
      const valB = (b as any)[this.sortColumn];
      if (valA < valB) return this.sortDirection === 'asc' ? -1 : 1;
      if (valA > valB) return this.sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
    this.currentPage = 1;
  }

  // Apply filter based on a specific column.
  applyColumnFilter() {
    if (!this.filterText.trim()) return;
    this.filteredStockList = this.filteredStockList.filter((item) => {
      const val = (item as any)[this.filterColumn]?.toString().toLowerCase() || '';
      return val.includes(this.filterText.toLowerCase());
    });
  }

  // Calculate total pages for pagination.
  get totalPages(): number {
    return Math.ceil(this.filteredStockList.length / this.itemsPerPage);
  }

  // Get the current page data.
  get pagedData(): StockItem[] {
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    return this.filteredStockList.slice(startIndex, startIndex + this.itemsPerPage);
  }

  // Navigate to a specific page.
  goToPage(page: number) {
    if (page >= 1 && page <= this.totalPages) {
      this.currentPage = page;
    }
  }

  // Open the modal for editing or creating a record.
  openEditModal(item?: StockItem) {
    this.showEditModal = true;
    if (item) {
      this.isEditMode = true;
      this.editData = { ...item };
    } else {
      this.isEditMode = false;
      this.editData = {
        customentName: '',
        product: '',
        supplier: '',
        dateOfEntry: '',
        quantity: 0,
        price: 0,
        sellingPrice: 0,
        cashier: '',
        status: 'pending'
      };
    }
  }

  // Close the modal.
  closeModal() {
    this.showEditModal = false;
  }

  // Save data after editing or creating a record.
  saveData() {
    if (this.isEditMode) {
      const idx = this.stockList.findIndex(
        (s) =>
          s.customentName === this.editData.customentName &&
          s.product === this.editData.product
      );
      if (idx !== -1 && this.editData) {
        this.stockList[idx] = this.editData as StockItem;
      }
    } else {
      this.stockList.unshift(this.editData as StockItem);
    }
    this.filteredStockList = [...this.stockList];
    this.applySearchFilter();
    this.showEditModal = false;
  }
}
